#!/bin/bash

# Update argument check
if [ $# -lt 1 ]; then
    echo "Usage: $0 <directory1> [directory2 ...] [skip_tests=true/false]"
    exit 1
fi

skip_tests="true"  # Default value
directories=()

# Parse arguments: collect directories and check for skip_tests option
for arg in "$@"; do
    if [[ "$arg" == "skip_tests=true" || "$arg" == "skip_tests=false" ]]; then
        skip_tests="${arg#skip_tests=}"
    else
        directories+=("$arg")
        # Check if directory exists
        if [ ! -d "$arg" ]; then
            echo "Error: Directory '$arg' does not exist"
            exit 1
        fi
    fi
done

# Create temporary file
temp_file=$(mktemp)

# Function to process each Python file
process_file() {
    local file="$1"
    local base_dir="$2"
    local relative_path="${file#$base_dir/}"
    
    # Add file header
    echo -e "\n### $relative_path\n" >> "$temp_file"
    
    # Add code block markers and file content
    echo '```' >> "$temp_file"
    cat "$file" >> "$temp_file"
    echo '```' >> "$temp_file"
}

# Export function so it's available to find command
export -f process_file
export temp_file

# Process each directory
for directory in "${directories[@]}"; do
    # Modify find command to conditionally exclude test files
    if [ "$skip_tests" = "true" ]; then
        find "$directory" -type f -name "*.py" -not -name "*test*.py" -exec bash -c 'process_file "$0" "'"$directory"'"' {} \;
    else
        find "$directory" -type f -name "*.py" -exec bash -c 'process_file "$0" "'"$directory"'"' {} \;
    fi
done

# Output the result
cat "$temp_file"

# Clean up
rm "$temp_file"